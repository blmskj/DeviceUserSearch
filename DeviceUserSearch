$version="2.6"
write-host "v$version"
#need to work out queue/throttle

Get-Job | Remove-Job #cleaning existing jobs in the session

$string=""

write-host "Starting at: $((Get-Date).ToString())"
$computers = Get-ADComputer -Filter * -Properties * #| Format-List name, ipv4*, oper*, DistinguishedName
$Results = @()
$onlinediveice = @()



$TC={ param($computer)
   if(Test-Connection $computer -Quiet){
        return $computer
    }else{
        return $false
    }
}

<#
#this is is to limit how many device for testing purpose
$computers2 = @()
$i=0
$computers | ForEach-Object {
    $computer=$_.name
    $Completed = ($i/$computers.Count) * 100
    Write-Progress -Activity "Counting: $computer ..." -Status "Progress:" -PercentComplete $Completed
    if($i -lt 4) {
        $computers2+=$_
    }
    $i+=1
}
$computers=$computers2
Write-Progress -Completed
#>

write-host "There are " $computers.Count " device on the domain."

$i=0
$computers | ForEach-Object {
    $computer=$_.name
    $Completed = ($i/$computers.Count) * 100
    Write-Progress -Activity "Searching: $computer ..." -Status "Progress:" -PercentComplete $Completed
    $job=Start-Job $TC -ArgumentList $computer 
}
Write-Progress -Completed

# Wait for it all to complete
$totaljobs=Get-Job
$j=0
$loading=@(
    "$([char]10251)",
    "$([char]10265)",
    "$([char]10297)",
    "$([char]10296)",
    "$([char]10300)",
    "$([char]10292)",
    "$([char]10278)",
    "$([char]10279)",
    "$([char]10247)",
    "$([char]10255)"
)
While (Get-Job -State "Running"){
    $runningjobs=Get-Job -State "Running"
    write-host  -NoNewLine -f yellow "`r$($loading[$j]) "
    write-host  -NoNewLine "Running jobs: $($runningjobs.Count) of $($totaljobs.Count)         "

	$j+=1
	if($j -eq $loading.count){
		$j=0
	}
    Start-Sleep -Milliseconds 100
}

write-host  -NoNewLine "`rDone!                                                               "

#getting all the jobs result/return
$onlinediveice=Get-Job | Receive-Job
#write-host "recived jobs`n" $onlinediveice


$i=0
$computers | ForEach-Object {
    $computer=$_.name
    #write-host "Checking device $computer"
        
    $Completed = ($i/$computers2.Count) * 100
    Write-Progress -Activity "Getting users on $computer ..." -Status "Progress:" -PercentComplete $Completed
    
    try{
        if($onlinediveice.contains($computer)){
            #write-host "Quering device $computer"

            # 2>$null to silent error with the connection
            $queryresult=query user /server:$computer 2>$null
            if($queryresult.Count -gt 0){
                $queryresult 2>$null | ForEach-Object {
                    $string=$_
                    if ($string.Contains("Active")) {
					    $string=$string.Trim()
                        $string=$string.Substring(0, [Math]::Min($string.Length, 20))
					    $string=$string.Trim()                    
                        #write-host "Found active user $string on pc $computer"
                        $LoggedOnUser=$string
                    }
                }                

                if ($LoggedOnUser) {
                    $Results += [PSCustomObject]@{
                        ComputerName = $Computer
                        LoggedOnUser = $LoggedOnUser
                    }
                }else{
                    $Results += [PSCustomObject]@{
                        ComputerName = $Computer
                        LoggedOnUser = "No user logged on"
                    }
                }

            }else{
                $Results += [PSCustomObject]@{
                    ComputerName = $Computer
                    LoggedOnUser = "On-line but could not connect/No user logged on"
                }
            }			
        }else{ 		
            $Results += [PSCustomObject]@{
                ComputerName = $Computer
                LoggedOnUser = "Offline"
            }
        }
    }catch{
        # Handle errors (e.g., access denied, WMI issues)
        $Results += [PSCustomObject]@{
            ComputerName = $Computer
            LoggedOnUser = "Error: $($_.Exception.Message)"
        }
    }
    $i = $i+1
}
Write-Progress -Completed

write-host "Finishing at: $((Get-Date).ToString())"
write-host  "`nSummery:"
$Results | Format-Table -AutoSize

Write-Host -NoNewLine 'Press any key to continue...'
$Host.UI.RawUI.ReadKey('NoEcho,IncludeKeyDown') > $null
