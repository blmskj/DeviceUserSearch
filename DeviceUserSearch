$version="2.9"
write-host "v$version"
#need to work out queue/throttle

Get-Job | Remove-Job #cleaning existing jobs in the session

$string=""

write-host "Starting at: $((Get-Date).ToString())"
$computers = Get-ADComputer -Filter * -Properties * #| Format-List name, ipv4*, oper*, DistinguishedName
$Results = @()
$onlinediveice = @()


write-host "There are " $computers.Count " device on the domain."


if($computers.Count -gt 50){
	$answer = Read-Host "There are a lot of devices it may require a lof of time. Do you want to continue? ([y]/n)"
	write-host $answer
    if($answer -eq "n" -or $answer -eq "no"){
		exit 0
	}
}

write-host "Starting the checks..."
$totdevice=$computers.Count
$onlinediveice=@()

$i=0
$computers | ForEach-Object {

    $Completed = ($i/$computers.Count) * 100
    <#debug reduce to 25% of the total divice to ping 
    if($Completed -gt 25){
        return
    }
    #>

    Write-Progress -Activity "Checking online pc" -Status "Progress:" -PercentComplete $Completed
    $computer=$_.name
    #ping PC to see if it is online
    $Timeout = 20
    $Ping = New-Object System.Net.NetworkInformation.Ping
            
    $Response = ""
    $ResponseError = ""

    try
    {
        $Response = $Ping.Send($computer.Trim(),$Timeout)  | Out-Null
              
        Write-Host "Ping: " $Response.Status -ForegroundColor Yellow
        if($Response.Status -eq "TimedOut")            {
            $ResponseError =  "TimedOut"
        }
        $onlinediveice=$onlinediveice+$computer
    }Catch{
        $ResponseError =  "TimedOut"
    }
    $i=$i+1
}
Write-Progress -Activity "Checking online pc" -Completed

write-host "`n`n Starting to get the users...`n"


$i=0
$computers | ForEach-Object {
    $computer=$_.name
    #debug write-host -NoNewLine "`rChecking device $computer."
        
    $Completed = ($i/$computers.Count) * 100
    Write-Progress -Activity "Getting users on computers" -Status "Progress:" -PercentComplete $Completed
	
    try{
        if($onlinediveice.contains($computer)){
            #write-host "Quering device $computer"

            # 2>$null to silent error with the connection
            $queryresult=query user /server:$computer 2>$null
            if($queryresult.Count -gt 0){
                $queryresult 2>$null | ForEach-Object {
                    $string=$_
                    if ($string.Contains("Active")) {
					    $string=$string.Trim()
                        $string=$string.Substring(0, [Math]::Min($string.Length, 20))
					    $string=$string.Trim()                    
                        #write-host "Found active user $string on pc $computer"
                        $LoggedOnUser=$string
                    }
                }                

                if ($LoggedOnUser) {
                    $Results += [PSCustomObject]@{
                        ComputerName = $Computer
                        LoggedOnUser = $LoggedOnUser
                    }
                }else{
                    $Results += [PSCustomObject]@{
                        ComputerName = $Computer
                        LoggedOnUser = "No user logged on"
                    }
                }

            }else{
                $Results += [PSCustomObject]@{
                    ComputerName = $Computer
                    LoggedOnUser = "On-line but could not connect/No user logged on"
                }
            }			
        }else{ 		
            $Results += [PSCustomObject]@{
                ComputerName = $Computer
                LoggedOnUser = "Offline"
            }
        }
    }catch{
        # Handle errors (e.g., access denied, WMI issues)
        $Results += [PSCustomObject]@{
            ComputerName = $Computer
            LoggedOnUser = "Error: $($_.Exception.Message)"
        }
    }
    $i = $i+1
}
Write-Progress -Activity "Getting users on computers" -Completed

write-host "Finishing at: $((Get-Date).ToString())"
write-host  "`nSummery:"
$Results | Format-Table -AutoSize
